<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"
       default-autowire="byName">
    <!-- 引入数据库配置文件 -->
    <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/>
    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close"
        p:driverClassName="${datasource.driver.class.name}"
        p:url="${datasource.url}"
        p:username="${datasource.username}"
        p:password="${datasource.password}"/>

    <!-- 配置sqlSessionFactory
        configLocation : mybatis 配置文件地址
        mapperLocations: mapper.xml 地址
     -->
    <bean id="mySqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
        p:dataSource-ref="dataSource"
        p:configLocation="classpath:mybatis/mybatis-config.xml"
        p:mapperLocations="classpath:mybatis/mapper/*.xml"/>

    <!-- 有2种方式，一种是使用MapperScannerConfigurer扫描实例化mapper,另一种是通过sqlSessionTemplate获取mapper -->
    <!-- 配置mapper 扫描器 注：sqlSessionFactoryBeanName使用这种方式引入sqlSessionFactory，并且名称不能为sqlSessionFactory
     不满足这两种情况，会出现导入数据源使用${}通配符将无法识别导入 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
        p:basePackage="com.alan.mybatis.mapper"
        p:sqlSessionFactoryBeanName="mySqlSessionFactory"/>

    <!-- sqlSessionTemplate 方式 -->
    <!-- <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="mySqlSessionFactory"/>
        <constructor-arg index="1" value="SIMPLE"/>
    </bean> -->
</beans>